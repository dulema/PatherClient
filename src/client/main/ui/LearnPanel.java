/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LearnPanel.java
 *
 * Created on Mar 22, 2010, 10:45:23 PM
 */

package main.ui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import main.Client;
import main.daemon.Command;
import main.daemon.commands.CCWCommand;
import main.daemon.commands.CWCommand;
import main.daemon.commands.GoCommand;
import main.daemon.commands.CancelCommand;
import main.daemon.commands.FaceCommand;
import main.daemon.commands.MoveCommand;

/**
 *
 * @author Sandro Badame <a href="mailto:s.badame@gmail.com">s.badame&amp;gmail.com</a>
 */
public class LearnPanel extends javax.swing.JPanel {

    private Client client;
    private Command commandBeingRun;

    //Where the command first started
    private int startOdo;

    //First Learning button text
    private String toLearnText = "Click here to start recording a path.";
    private String toStopLearning = "Click here to stop recording the path and save.";

    //Last Directory

    /** Creates new form LearnPanel */
    public LearnPanel() {
        initComponents();
    }

    LearnPanel(Client c) {
        this();
        this.client = c;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        learn = new javax.swing.JToggleButton();
        right = new javax.swing.JButton();
        left = new javax.swing.JButton();
        controller = new javax.swing.JButton();

        learn.setText(toLearnText);
        learn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnActionPerformed(evt);
            }
        });

        right.setText("RIGHT");
        right.setEnabled(false);
        right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightActionPerformed(evt);
            }
        });

        left.setText("LEFT");
        left.setEnabled(false);
        left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftActionPerformed(evt);
            }
        });

        controller.setText("FORWARD");
        controller.setEnabled(false);
        controller.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                controllerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(learn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(left)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(controller, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(right)))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(learn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(left, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(controller, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(right, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightActionPerformed
        left.setEnabled(false);
        right.setEnabled(false);

        controller.setText("STOP");
        commandBeingRun = new CWCommand();
        sendCommand(commandBeingRun);
    }//GEN-LAST:event_rightActionPerformed

    private void leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftActionPerformed
       left.setEnabled(false);
       right.setEnabled(false);

       controller.setText("STOP");
       commandBeingRun = new CCWCommand();
       sendCommand(commandBeingRun);
    }//GEN-LAST:event_leftActionPerformed
    
    boolean currentlylearning = false;
    String start, end;
    ArrayList<Command> commands = new ArrayList<Command>();
    private void learnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnActionPerformed
        if (commandBeingRun != null) {
            JOptionPane.showMessageDialog(this, "Pather must first be stopped before attemping to save the path", "Stop Pather", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (currentlylearning) {
            //Stops learning
            //Done learning time to save the graph
            new Thread(new Runnable(){
                public void run(){
                    JFileChooser pathFileChooser = new JFileChooser(ClientFrame.lastDirectory);
                    int response = pathFileChooser.showSaveDialog(LearnPanel.this);
                    if (response == JFileChooser.APPROVE_OPTION) {
                        File pathFile = pathFileChooser.getSelectedFile();
                        PrintWriter printWriter;
                        try {
                            printWriter = new PrintWriter(pathFile);
                            for (Command command : commands) {
                                printWriter.println(command.getStorableString());
                            }
                            printWriter.flush();
                            printWriter.close();
                            ClientFrame.lastDirectory = pathFile.getParentFile();
                            client.getFrame().logInfo("Path: \"" + pathFile.getAbsolutePath() + "\" has been saved");
                        } catch (FileNotFoundException ex) {
                            JOptionPane.showMessageDialog(LearnPanel.this, "Couldn't write to the selected file", "Path wasn't saved", JOptionPane.ERROR_MESSAGE);
                        }
                    }

                } 
            }).start();
            learn.setText(toLearnText);
            start = end = null;

            //Stop learning!
            right.setEnabled(false);
            left.setEnabled(false);
            controller.setEnabled(false);

        }else{
            //Start learning!
            right.setEnabled(true);
            left.setEnabled(true);
            controller.setEnabled(true);

            commands.clear();

            learn.setText(toStopLearning);
        }
        currentlylearning = !currentlylearning;
    }//GEN-LAST:event_learnActionPerformed

    private void controllerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_controllerActionPerformed
        if (controller.getText().equals("STOP")) {
            //Cancel the command
            sendCommand(new CancelCommand(commandBeingRun));
            
            //Enable the buttons again
            left.setEnabled(true);
            right.setEnabled(true);

            //Set the text of the controller button
            controller.setText("FORWARD");

            //Time to actually save the command that represents that movement
            Command newcom = null;
            if (commandBeingRun instanceof GoCommand) {
                int distance = client.getDaemon().getOdometerCount() - startOdo;
                newcom = new MoveCommand(distance);
            }else if (commandBeingRun instanceof CCWCommand || commandBeingRun instanceof CWCommand){
                newcom = new FaceCommand(client.getDaemon().getHeading());
            }else{
                System.err.println("Rouge command: " + commandBeingRun);
            }
            if (newcom != null) {
                commands.add(newcom);
            }
            commandBeingRun = null;

        }else if (controller.getText().equals("FORWARD")){
            //Remember how far we are right now so that we know how far we've traveled
            startOdo = client.getDaemon().getOdometerCount();
            //Send the move forward command
            commandBeingRun = new GoCommand();
            sendCommand(commandBeingRun);

            //Disable the other buttons
            left.setEnabled(false);
            right.setEnabled(false);

            //Set the text of the controller button
            controller.setText("STOP");
        }else{
            throw new RuntimeException("Controller has text: " + controller.getText());
        }
    }//GEN-LAST:event_controllerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton controller;
    private javax.swing.JToggleButton learn;
    private javax.swing.JButton left;
    private javax.swing.JButton right;
    // End of variables declaration//GEN-END:variables

    void sphinxWordDetected(String word) {
        if (word.toLowerCase().equals("forward") || word.toLowerCase().equals("go")) {
            if (controller.getText().equals("FORWARD")) {
                controllerActionPerformed(null);        
            }
        }else if (word.toLowerCase().equals("left")) {
            leftActionPerformed(null);
        }else if (word.toLowerCase().equals("right")){
            rightActionPerformed(null);
        }else if (word.toLowerCase().equals("stop")){
            if (controller.getText().equals("STOP")) {
                controllerActionPerformed(null);
            }
        }else{
            System.err.println("Nothing to do here: " + word);
        }
    }

   private void sendCommand(Command c){
       client.sendCommand(c);
   }

}
