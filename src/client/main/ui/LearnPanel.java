/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * LearnPanel.java
 *
 * Created on Mar 22, 2010, 10:45:23 PM
 */

package main.ui;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.ArrayList;
import main.Client;
import main.daemon.Command;
import main.daemon.commands.CCWCommand;
import main.daemon.commands.CWCommand;
import main.daemon.commands.GoCommand;
import main.daemon.commands.CancelCommand;
import main.pathing.PathGraph;

/**
 *
 * @author Sandro Badame <a href="mailto:s.badame@gmail.com">s.badame&amp;gmail.com</a>
 */
public class LearnPanel extends javax.swing.JPanel {

    private Client client;
    private Command commandBeingRun;

    /** Creates new form LearnPanel */
    public LearnPanel() {
        initComponents();
    }

    LearnPanel(Client c) {
        this();
        this.client = c;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        learn = new javax.swing.JToggleButton();
        go = new javax.swing.JButton();
        right = new javax.swing.JButton();
        left = new javax.swing.JButton();
        stop = new javax.swing.JButton();

        learn.setText("Click to Start Learning");
        learn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                learnActionPerformed(evt);
            }
        });

        go.setText("GO");
        go.setEnabled(false);
        go.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goActionPerformed(evt);
            }
        });

        right.setText("RIGHT");
        right.setEnabled(false);
        right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightActionPerformed(evt);
            }
        });

        left.setText("LEFT");
        left.setEnabled(false);
        left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftActionPerformed(evt);
            }
        });

        stop.setText("STOP");
        stop.setEnabled(false);
        stop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(learn, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(left)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(right)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(go))
                        .addComponent(stop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(learn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(go)
                    .addComponent(left)
                    .addComponent(right))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stop, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void goActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goActionPerformed
       commandBeingRun = new GoCommand();
       sendCommand(commandBeingRun);
    }//GEN-LAST:event_goActionPerformed

    private void rightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightActionPerformed
        commandBeingRun = new CWCommand();
       sendCommand(commandBeingRun);
    }//GEN-LAST:event_rightActionPerformed

    private void leftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftActionPerformed
       commandBeingRun = new CCWCommand();
       sendCommand(commandBeingRun);
    }//GEN-LAST:event_leftActionPerformed
    
    boolean learning = false;
    String start, end;
    ArrayList<Command> commands = new ArrayList<Command>();
    private void learnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_learnActionPerformed
        if (learning) {
            //Stops learning
            //Done learning time to save the graph
            PathGraph.getPathGraph().setPath(start, end, new ArrayList(commands));
            learn.setText("Click to start learning");
            start = end = null;

            //Start learning!
            go.setEnabled(false);
            right.setEnabled(false);
            left.setEnabled(false);
            stop.setEnabled(false);

        }else{
            //Start learning!
            go.setEnabled(true);
            right.setEnabled(true);
            left.setEnabled(true);
            stop.setEnabled(true);

            commands.clear();
            learning = true;
            learn.setText("Learning...");
        }
    }//GEN-LAST:event_learnActionPerformed

    private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
        sendCommand(new CancelCommand(commandBeingRun));
    }//GEN-LAST:event_stopActionPerformed

    private void savePath(File f){
        try {
            PrintWriter fileout = new PrintWriter(f);
            for (Command command : commands) {
                fileout.println(command.getFileCommand());
            }
            fileout.close();
        } catch (FileNotFoundException ex) {
            System.err.println("Can't write to file");
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton go;
    private javax.swing.JToggleButton learn;
    private javax.swing.JButton left;
    private javax.swing.JButton right;
    private javax.swing.JButton stop;
    // End of variables declaration//GEN-END:variables

    void sphinxWordDetected(String word) {
        if (word.toLowerCase().equals("go")) {
            goActionPerformed(null);
        }else if (word.toLowerCase().equals("left")) {
            leftActionPerformed(null);
        }else if (word.toLowerCase().equals("right")){
            rightActionPerformed(null);
        }else if (word.toLowerCase().equals("stop")){
            stopActionPerformed(null);
        }else{
            System.err.println("Nothing to do here: " + word);
        }
    }

   private void sendCommand(Command c){
       if (learning) {
          commands.add(c); 
       }
       client.sendCommand(c);
   }

}
